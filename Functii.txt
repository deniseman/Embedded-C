INCREMENTARE LA APRINDERE LED

         if(PINB & (1<<2)) //testare pin PB2
        { 
	 	if(starePB2 == 0) //variabila va .ine minte starea
       			{ starePB2 = 1; //anterioara a pin-ului PB2
        	  	n++; //se incrementeaza variabila n
        		}
        }else
        starePB2 = 0;
%-------------------------------------------------------------------------------------

DISPLAY:

void display(int poz, int car)
{
     PORTA &= 0b11110000;
     PORTC &= 0b00000000;
     PORTA |= (1<<poz);
     switch(car)
        {        
        case 0:  PORTC |=0b00111111;break;
        case 1:  PORTC |=0b00000110;break;
        case 2:  PORTC |=0b01011011;break;
        case 3:  PORTC |=0b01001111;break;
        case 4:  PORTC |=0b01100110;break;
        case 5:  PORTC |=0b01101101;break;
        case 6:  PORTC |=0b01111101;break;
        case 7:  PORTC |=0b00000111;break;
        case 8:  PORTC |=0b01111111;break;
        case 9:  PORTC |=0b01101111;break;
        }
        Delay_ms(4);
}
--------------------------------------------------------------------------------------

INITIALIZARE TIMER 64
void init_timer()
{
    TCCR2 = 0b00000011; //prescaler 64, mod normal de operare
    TCNT2 = 0; //se ini.ializeaza numaratorul cu 0
}
--------------------------------------------------------------------------------------

INITIALIZARE TIMER 32
void init_timer(){
TCCR2 = 0b00000100; //prescaler32, mod normal de operare
TCNT2 = 0; //se ini.ializeaza numaratorul cu 0
}
--------------------------------------------------------------------------------------

INIT TIMER CU INTRERUPERI
void init_timer(){
SREG = 1<<7; // Global Interrupt Enable
TCCR0 = 0b00001011; //CTC-3,6; Prescaler-0,1,2
TCNT0 = 0;
OCR0 = 125;
TIMSK |= 0b00000010; //set interrupt OCM
}
---------------------------------------------------------------------------------------

AFISAREA TIMPULUI CU AJUTORUL TIMERULUI
for(;;){
if(TCNT0>=125){ //se implineste o milisecunda
TCNT0 = 0; //resetare software
ms++;
if(ms>=1000){ //implinirea unei secunde
ms=0;
s++;
}
if(s==60){
s=0;
m++;
}
}
display(3,s%10);
display(2,(s/10)%10);
display(1,(m%10);
display(0,(m/10)%10);
}
---------------------------------------------------------------------------------------functie iv Timer

void Timer1_OC_ISR() iv IVT_ADDR_TIMER0_COMP { //ISR
digit++;
switch(digit){
case 1: display(1,s%10); break;
case 2: display(2,(s/10)%10); break;
case 3: display(3,m%10); break;
case 4: display(4,(m/10)%10); digit=0; break;}
if (ms == 999){
s++;
ms = 0;
if(s == 60){
s = 0;
m++;
}
}else ms++;
}
---------------------------------------------------------------------------------------

INTRERUPERI INTERNE
void INT0_ISR() iv IVT_ADDR_INT0 ics ICS_AUTO {
   PORTD^=(1<<3);
}
void Init_INT0(){
GICR |= (1<<6); // activarea întreruperii externe INT0
MCUCR |= 0b00000010; // precizare cã evenimentul va avea
		    // loc pe frontul descrescãtor
SREG |= (1<<7);    // activarea globala a întreruperilor
}
void main() {
            DDRD &=(~(1<<2));
            DDRD |=(1<<3);
            Init_INT0();
            while(1);
}
--------------------------------------------------------------------------------------

INITIALIZARE ADC

void Init_adc(){
ADMUX = 0b01000000; //Referin?a - AVCC
ADCSRA = 0b10000111; //Activare ADC; Prescaler = 128;
ADCSRA |= (1<<3); //Activare întrerupere ADIE
SREG |= (1<<7); //Global Interrupt Enable
}
---------------------------------------------------------------------------------------

CONVERSIE ADC PT TEMPERATURA INTERN
int var = 0;
int acdlX = 0, acdhX = 0;
int adc, T;
float Vin, tmp;
void ADC_Completed() iv IVT_ADDR_ADC
{
adclX = ADCL;
adchX = ADCH;
adc = (adchX << 8) | adclX;
Vin = ((float)adc*5)/1024;
tmp = Vin*1000;
T = (int)tmp;
}
---------------------------------------------------------------------------------------

READADC

int readADC (char ch)
{

    ADMUX &= 0b11100000; //Reseteazã canalul de conversie, ultimii 5 de 0 repr canalul
    ADMUX |= ch; //Seteazã canalul conv.
    ADCSRA |= (1<<6); //Începe conversia
    while(ADCSRA & (1<<6)) ; //Asteaptã finalizarea conv.
    acdlX = ADCL;
    acdhX = ADCH;
    return (acdhX << 8 | acdlX);
}
---------------------------------------------------------------------------------------

INITIALIZARE PWM
void init_PWM2()
{
     DDRD |= 1<<7; //PD7 – pin de ie.ire
     TCCR2 = 0b01101001; //FastPWM neinversat, N=1
}
---------------------------------------------------------------------------------------